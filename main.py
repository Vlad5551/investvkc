from vkbottle.bot import Bot, Message
from vkbottle import Keyboard, KeyboardButtonColor, Text, OpenLink, GroupEventType, GroupTypes, LoopWrapper
from random import randint, choice
from math import floor
import time, pymysql, vkcoin, threading, pyqiwi

merchant = vkcoin.VKCoin(key="O*-tp_yX9u;OskP_s2#P.R-#0LdQmsZNcHHf8g[OQKByOxGyhe", user_id=705783864)
bot = Bot("dd8f8b777c6643b95bccde155cc1b492f0a5c1c07e3f6de99a60561711212f1b474e9b26084dbfba17a95")
admin_ids = [498475943,705783864]
longpoll_handler = None
longpoll_transaction = None

top = ["ü•á 1.", "ü•à 2.", "ü•â 3.", "üèÖ 4.", "üèÖ 5.", "üèÖ 6.", "üèÖ 7.", "üèÖ 8.", "üèÖ 9.", "üèÖ 10."]

lw = LoopWrapper()
bot.labeler.vbml_ignore_case = True

def getCon():
	try:
		connection = pymysql.connect(
			host="141.8.192.193",
			port=3306,
			user="a0677620_invest",
			password="qwerty123",
			database="a0677620_invest",
			cursorclass=pymysql.cursors.DictCursor)
		return connection
	except Exception as e:
		print(e)

class user:
	def create():
		connection = getCon()
		cursor = connection.cursor()
		cursor.execute("""CREATE TABLE IF NOT EXISTS users
			(
				id int(20) primary key AUTO_INCREMENT,
				tag varchar(50) not null default "[id0|N/D]",
				vk_id int(20) not null default 0,
				balance bigint(20) not null default 0,
				invest_balance bigint(20) not null default 0,
				all_invest bigint(20) not null default 0,
				all_invest_week bigint(20) not null default 0,
				last_time bigint(20) not null default 0,
				vip smallint(6) not null default 0,
				autoinvest smallint(6) not null default 0,
				dohod_everyday bigint(20) not null default 0,
				last_id int(20) not null default 0,
				all_topup bigint(20) not null default 0,
				bonus_time bigint(20) not null default 0,
				subscribe tinyint(4) not null default 0,
				dollars bigint(20) not null default 0,
				CityName varchar(50) not null default "BigCity",
				CityCoffers bigint(20) not null default 0,
				CityPopulation int(20) not null default 0,
				CityHappy tinyint(10) not null default 0,
				CityTaxes bigint(20) not null default 0,
				CityBuildings int(20) not null default 0,
				CityWaterCosts bigint(20) not null default 0,
				CityEnergyCosts bigint(20) not null default 0,
				CityServiceCosts bigint(20) not null default 0,
				City_time bigint(20) not null default 0,
				CityEvent_time bigint(20) not null default 0
			)
			CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci""")
		connection.commit()
		connection.close()

	def insert(id, tag):
		connection = getCon()
		cursor = connection.cursor()
		cursor.execute(f"INSERT INTO users (vk_id, tag) VALUES ({id}, '{tag}')")
		connection.commit()
		connection.close()

	def get(id, var):
		connection = getCon()
		cursor = connection.cursor()
		if var.lower() != "all":
			cursor.execute(f"SELECT {var} FROM users WHERE vk_id = {id}")
			connection.commit()
			return cursor.fetchone()[var]
		else:
			cursor.execute(f"SELECT * FROM users WHERE vk_id = {id}")
			connection.commit()
			return cursor.fetchall()
		connection.close()

	def get_byid(id, var="all"):
		connection = getCon()
		cursor = connection.cursor()
		if var == "all":
			cursor.execute(f"SELECT * FROM users WHERE id = {id}")
			connection.commit()
			return cursor.fetchall()
		else:
			cursor.execute(f"SELECT vk_id, tag, {var} FROM users WHERE id = {id}")
			connection.commit()
			return cursor.fetchall()
		connection.close()

	def update(id, var, val):
		connection = getCon()
		cursor = connection.cursor()
		if isinstance(val, int):
			cursor.execute(f"UPDATE users SET {var} = {val} WHERE vk_id = {id}")
		else:
			cursor.execute(f"UPDATE users SET {var} = '{val}' WHERE vk_id = {id}")
		connection.commit()
		connection.close()

	def uni_update(var, val):
		connection = getCon()
		cursor = connection.cursor()
		cursor.execute(f"UPDATE users SET {var} = {val}")
		connection.commit()
		connection.close()

	def check(id):
		connection = getCon()
		cursor = connection.cursor()
		cursor.execute(f"SELECT balance FROM users WHERE vk_id = {id}")
		connection.commit()
		value = cursor.fetchone()
		if value == None:
			return False
		else:
			return True
		connection.close()

	def counts(var=None):
		connection = getCon()
		cursor = connection.cursor()
		if var == None:
			cursor.execute("SELECT COUNT(1) FROM users")
		else:
			cursor.execute(f"SELECT COUNT(1) FROM users WHERE {var} > 0")
		connection.commit()
		return cursor.fetchone()['COUNT(1)']
		connection.close()

	def get_top(var, limit=10):
		connection = getCon()
		cursor = connection.cursor()
		if limit != None:
			cursor.execute(f"SELECT vk_id, tag, vip, {var} FROM users WHERE vk_id != 498475943 and vk_id != 705783864 ORDER BY {var} DESC LIMIT {limit}")
		else:
			cursor.execute(f"SELECT vk_id, tag, vip, {var} FROM users ORDER BY {var} DESC")
		connection.commit()
		return cursor.fetchall()
		connection.close()

	def get_citytop():
		connection = getCon()
		cursor = connection.cursor()
		cursor.execute(f"SELECT vk_id, tag, vip, CityPopulation FROM users ORDER BY CityPopulation DESC")
		connection.commit()
		return cursor.fetchall()
		connection.close()

class globals:
	def create():
		connection = getCon()
		cursor = connection.cursor()
		cursor.execute("""CREATE TABLE IF NOT EXISTS globals
			(
				ref_bonus int(20) not null default 200000,
				bonus_max int(20) not null default 200000,
				sub_bonus int(20) not null default 100000,
				mnozhitel tinyint(4) not null default 1
			)
			CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci""")
		connection.commit()
		connection.close()

	def insert():
		connection = getCon()
		cursor = connection.cursor()
		cursor.execute("INSERT INTO globals (ref_bonus) VALUES (200000)")
		connection.commit()
		connection.close()

	def get(var):
		connection = getCon()
		cursor = connection.cursor()
		cursor.execute(f"SELECT {var} FROM globals")
		connection.commit()
		return cursor.fetchone()[var]
		connection.close()

	def update(var, value):
		connection = getCon()
		cursor = connection.cursor()
		cursor.execute(f"UPDATE globals SET {var} = {value} WHERE id = 1")
		connection.commit()
		connection.close()

def rezerv():
	return merchant.get_balance(705783864)["705783864"]/1000

def formarter(var, symbol=" "):
	return '{:,}'.format(var).replace(',', symbol)

def number_format(var):
	if str(type(var)) == "<class 'str'>":
		var = var.lower()
		if "–∫" in var:
			var = var.replace("–∫", "000")
		elif "." in var:
			var = var.split(".")
		elif " " in var:
			var = var.split(" ")
		elif "-" in var:
			var = var.split("-")
		elif "–º–ª–Ω" in var:
			var = var.replace("–º–ª–Ω", "000000")
		elif "—Ç—ã—Å" in var:
			var = var.replace("—Ç—ã—Å", "000")
		elif "–º–ª—Ä–¥" in var:
			var = var.replace("–º–ª—Ä–¥", "000000000")
	return int(var)

@merchant.payment_handler(handler_type='longpoll')
def vkc_payment(data):
	try:
		mnozhitel = globals.get("mnozhitel")
		user_id = int(data['from_id'])
		amounts = floor(int(data['amount']) / 1000)
		amount = amounts
		if amount >= 200000:
			amount = floor(amounts * mnozhitel)
		if amounts >= 1000000 and amounts < 10000000:
			amount = floor(amounts + 350000)
		elif amounts >= 10000000:
			amount = floor(amounts + 5000000)
		dollars_get = floor(amount*10)
		user.update(user_id, 'dollars', user.get(user_id, 'dollars') + dollars_get)
		user.update(user_id, 'invest_balance', user.get(user_id, 'invest_balance') + amount)
		user.update(user_id, 'all_topup', user.get(user_id, 'all_topup') + amounts)
	except:
		pass

def start_vkc():
	merchant.run_longpoll(tx=[1], interval=2)

threading.Thread(target=start_vkc).start()

menu_keyboard = Keyboard(one_time=False)
menu_keyboard.add(Text("üèÜ –¢–æ–ø—ã"))
menu_keyboard.add(Text("üìà –ò–Ω–≤–µ—Å—Ç"), color=KeyboardButtonColor.POSITIVE)
menu_keyboard.add(Text("üìí –ü—Ä–æ—Ñ–∏–ª—å"))
menu_keyboard.row()
menu_keyboard.add(OpenLink("https://vk.com/coin#x705783864_1000_1337_1", "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å"))
menu_keyboard.add(Text("üì§ –í—ã–≤–æ–¥"), color=KeyboardButtonColor.NEGATIVE)
menu_keyboard.get_json()

profile_keyboard = Keyboard(inline=True)
profile_keyboard.add(Text("üëë"))
profile_keyboard.add(Text("üè¢"))
profile_keyboard.add(Text("üé´"))
profile_keyboard.add(Text("üéÅ"), color=KeyboardButtonColor.POSITIVE)
profile_keyboard.row()
profile_keyboard.add(Text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
profile_keyboard.get_json()

top_keyboard = Keyboard(inline=True)
top_keyboard.add(Text('üí∏ –ü–æ –¥–æ—Ö–æ–¥—É'), color=KeyboardButtonColor.POSITIVE)
top_keyboard.add(Text('üí∞ –ü–æ –¥–æ–ª–ª–∞—Ä–∞–º'), color=KeyboardButtonColor.PRIMARY)
top_keyboard.row()
top_keyboard.add(Text('üè¢ –ü–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é –≥–æ—Ä–æ–¥–∞'), color=KeyboardButtonColor.PRIMARY)
top_keyboard.row()
top_keyboard.add(Text('‚è≥ –¢–æ–ø –Ω–µ–¥–µ–ª–∏'))
top_keyboard.add(Text('üìë –û–±—â–∏–π —Ç–æ–ø'))
top_keyboard.get_json()

vip_keyboard = Keyboard(inline=True)
vip_keyboard.add(Text('‚úî –ö—É–ø–∏—Ç—å VIP'), color=KeyboardButtonColor.POSITIVE)
vip_keyboard.get_json()

donate_keyboard = Keyboard(inline=True)
donate_keyboard.add(OpenLink('https://vk.com/coin#t705783864', 'ü§† –í–ª–∞–¥–µ–ª–µ—Ü'))
donate_keyboard.row()
donate_keyboard.add(OpenLink('https://vk.com/coin#t498475943', 'üëª –ö–æ–¥–µ—Ä'))
donate_keyboard.get_json()

city_keyboard = Keyboard(inline=True)
city_keyboard.add(Text("üí∞ –°–Ω—è—Ç—å —Å –∫–∞–∑–Ω—ã"), color=KeyboardButtonColor.POSITIVE)
city_keyboard.row()
city_keyboard.add(Text("üèô –ì–æ—Ä–æ–¥ –∑–¥–∞–Ω–∏—è"))
city_keyboard.add(Text("ü•≥ –ì–æ—Ä–æ–¥ —Å–æ–±—ã—Ç–∏—è"))
city_keyboard.get_json()

user.create()
globals.create()
try:
	globals.get("ref_bonus")
except:
	globals.insert()

print("–ò–Ω–≤–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω! –ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –æ–∫–Ω–æ –∏ –∏–¥—Ç–∏ –¥—Ä–æ—á–∏—Ç—å :)")

try:

	@bot.on.raw_event(GroupEventType.GROUP_JOIN, dataclass=GroupTypes.GroupJoin)
	async def joingroup(event: GroupTypes.GroupJoin):
		user_id = event.object.user_id
		if user.check(user_id):
			if user.get(user_id, 'subscribe') == 0:
				subscribe_bonus = globals.get("sub_bonus")
				user.update(user_id, 'invest_balance', user.get(user_id, 'invest_balance') + subscribe_bonus)
				user.update(user_id, 'subscribe', 1)
				await bot.api.messages.send(peer_id=user_id, message=f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –õ–æ–≤–∏ –±–æ–Ω—É—Å: {formarter(subscribe_bonus)} VK Coin", random_id=randint(-1000000000,1000000000))
			else:
				await bot.api.messages.send(peer_id=user_id, message="‚ùå –ó–∞—á–µ–º —Ç–∞–∫ —Ö–∏—Ç—Ä–∏—Ç—å?) –¢—ã —É–∂–µ –ø–æ–π–º–∞–ª –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É)", random_id=randint(-1000000000,1000000000))

	@bot.on.message(text = "–≥–æ—Ä <number:int> <amount:int>")
	async def city_build(message: Message, number=1, amount=1):
		user_id = message.from_id
		if user.check(user_id):
			balance = user.get(user_id, 'dollars')
			number = int(number)
			amount = int(amount)
			types = 1
			population_plus = 0
			if number == 1:
				house = "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–æ–º"
				price = 50000
				population_plus = randint(1,3)
				income = 500
			elif number == 2:
				house = "–•–∏–∂–∏–Ω–∞"
				price = 100000
				population_plus = randint(1,5)
				income = 1000
			elif number == 3:
				house = "–î–≤—É—Ö—ç—Ç–∞–∂–∫–∞"
				price = 500000
				population_plus = randint(1,20)
				income = 50000
			elif number == 4:
				house = "–¢—Ä—ë—Ö—ç—Ç–∞–∂–∫–∞"
				price = 750000
				population_plus = randint(1,30)
				income = 75000
			elif number == 5:
				house = "–ú–Ω–æ–≥–æ—ç—Ç–∞–∂–∫–∞"
				price = 1000000
				population_plus = randint(1,50)
				income = 100000
			elif number == 6:
				house = "–ù–µ–±–æ—Å–∫—Ä—ë–±"
				price = 2500000
				population_plus = randint(1,100)
				income = 250000
			elif number == 7:
				house = "–î–µ—Ä–µ–≤–æ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â—ã–π –∑–∞–≤–æ–¥"
				price = 100000
				service_costs = 1000
				happy_low = 1
				income = 10000
				types = 2
			elif number == 8:
				house = "–ú–∞—Ç–∞–ª–ª–æ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–≤–æ–¥"
				price = 150000
				service_costs = 1500
				happy_low = 1
				income = 15000
				types = 2
			elif number == 9:
				house = "–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥"
				price = 300000
				service_costs = 3000
				happy_low = 2
				income = 30000
				types = 2
			elif number == 10:
				house = "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥"
				price = 350000
				service_costs = 3500
				happy_low = 3
				income = 35000
				types = 2
			elif number == 11:
				house = "–í–∞–≥–æ–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥"
				price = 400000
				service_costs = 4000
				happy_low = 3
				income = 40000
				types = 2
			elif number == 12:
				house = "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∑–∞–≤–æ–¥"
				price = 420000
				service_costs = 4200
				happy_low = 3
				income = 42000
				types = 2
			elif number == 13:
				house = "–ù–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–≤–æ–¥"
				price = 800000
				service_costs = 8000
				happy_low = 4
				income = 80000
				types = 2
			elif number == 14:
				house = "–•–∏–º–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥"
				price = 1200000
				service_costs = 12000
				happy_low = 4
				income = 120000
				types = 2
			elif number == 15:
				house = "–î–µ—Ç—Å–∫–∏–π —Å–∞–¥"
				price = 100000
				service_costs = 2000
				population_plus = randint(1,10)
				happy_up = 1
				income = 10000
				types = 3
			elif number == 16:
				house = "–ú–ª–∞–¥—à–∞—è —à–∫–æ–ª–∞"
				price = 150000
				service_costs = 2500
				population_plus = randint(1,15)
				happy_up = 1
				income = 15000
				types = 3
			elif number == 17:
				house = "–°—Ä–µ–¥–Ω—è—è —à–∫–æ–ª–∞"
				price = 250000
				service_costs = 3500
				population_plus = randint(1,25)
				happy_up = 1
				income = 25000
				types = 3
			elif number == 18:
				house = "–ì–∏–º–Ω–∞–∑–∏—è"
				price = 300000
				service_costs = 4000
				population_plus = randint(1,30)
				happy_up = 1
				income = 30000
				types = 3
			elif number == 19:
				house = "–õ–∏—Ü–µ–π"
				price = 400000
				service_costs = 5000
				population_plus = randint(1,40)
				happy_up = 2
				income = 40000
				types = 3
			elif number == 20:
				house = "–ö–æ–ª–ª–µ–¥–∂"
				price = 500000
				service_costs = 6000
				population_plus = randint(1,50)
				happy_up = 2
				income = 50000
				types = 3
			elif number == 21:
				house = "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"
				price = 750000
				service_costs = 7500
				population_plus = randint(1,75)
				happy_up = 2
				income = 75000
				types = 3
			elif number == 22:
				house = "–ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–∞—Ä–∫"
				price = 200000
				population_plus = randint(1,50)
				happy_up = 1
				income = 2000
				types = 4
			elif number == 23:
				house = "–î–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞"
				price = 350000
				population_plus = randint(1,85)
				happy_up = 1
				income = 3500
				types = 4
			elif number == 24:
				house = "–ü–ª—è–∂"
				price = 500000
				population_plus = randint(1,120)
				happy_up = 1
				income = 5000
				types = 4
			elif number == 25:
				house = "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è"
				price = 800000
				population_plus = randint(1,300)
				happy_up = 1
				income = 8000
				types = 4
			elif number == 26:
				house = "–ü–∞—Ä–∫ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤"
				price = 1000000
				population_plus = randint(1,800)
				happy_up = 2
				income = 10000
				types = 4
			elif number == 27:
				house = "–ú—É–∑–µ–π"
				price = 2000000
				population_plus = randint(1,2000)
				happy_up = 2
				income = 20000
				types = 4
			elif number == 28:
				house = "–¢–µ–∞—Ç—Ä"
				price = 2200000
				population_plus = randint(1,2200)
				happy_up = 2
				income = 22000
				types = 4
			elif number == 29:
				house = "–û—Ç–µ–ª—å"
				price = 2500000
				population_plus = randint(1,3000)
				happy_up = 3
				income = 25000
				types = 4
			elif number == 30:
				house = "–í–µ—Ç—Ä—è–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è"
				price = 25000
				service_costs = 500
				happy_low = 1
				income = 2500
				types = 5
			elif number == 31:
				house = "–ë–ª–æ—á–Ω–æ-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è"
				price = 100000
				service_costs = 2000
				happy_low = 2
				income = 10000
				types = 5
			elif number == 32:
				house = "–í–æ–ª–Ω–æ–≤–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è"
				price = 300000
				service_costs = 6000
				happy_low = 2
				income = 30000
				types = 5
			elif number == 33:
				house = "–î–∏–∑–µ–ª—å–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è"
				price = 650000
				service_costs = 13000
				happy_low = 3
				income = 65000
				types = 5
			elif number == 34:
				house = "–ü—Ä–∏–ª–∏–≤–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è"
				price = 800000
				service_costs = 16000
				happy_low = 3
				income = 80000
				types = 5
			elif number == 35:
				house = "–°–æ–ª–Ω–µ—á–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è"
				price = 900000
				service_costs = 18000
				happy_low = 4
				income = 90000
				types = 5
			elif number == 36:
				house = "–¢–µ–ø–ª–æ–≤–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è"
				price = 1300000
				service_costs = 26000
				happy_low = 5
				income = 130000
				types = 5
			elif number == 37:
				house = "–ê—Ç–æ–º–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è"
				price = 1600000
				service_costs = 32000
				happy_low = 5
				income = 160000
				types = 5
			elif number == 38:
				house = "–í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω–∞—è –±–∞—à–Ω—è"
				price = 25000
				service_costs = 500
				happy_up = 1
				income = 2500
				types = 6
			elif number == 39:
				house = "–í–æ–¥–æ–Ω–∞—Å–æ—Å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è"
				price = 120000
				service_costs = 2400
				happy_up = 1
				income = 12000
				types = 6
			elif number == 40:
				house = "–í–æ–¥–æ–æ—á–∏—Å—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è"
				price = 400000
				service_costs = 8000
				happy_up = 1
				income = 40000
				types = 6
			elif number == 41:
				house = "–≠–∫–æ–ª–æ–≥–∏—á–Ω–∞—è –≤–æ–¥–æ–æ—á–∏—Å—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è"
				price = 800000
				service_costs = 16000
				happy_up = 3
				income = 80000
				types = 6
			elif number == 42:
				house = "–£—Ä–Ω–∞"
				price = 10000
				happy_up = 0
				income = 1000
				types = 7
			elif number == 43:
				house = "–ú—É—Å–æ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
				price = 50000
				happy_up = 1
				income = 5000
				types = 7
			elif number == 44:
				house = "–ú–∞–ª–∞—è —Å—Ç–∞–Ω—Ü–∏—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏"
				price = 100000
				happy_up = 1
				income = 10000
				types = 7
			elif number == 45:
				house = "–û–±—ã—á–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏"
				price = 250000
				happy_up = 1
				income = 25000
				types = 7
			elif number == 46:
				house = "–ë–æ–ª—å—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏"
				price = 550000
				happy_up = 1
				income = 55000
				types = 7
			try:
				price *= amount
				if balance >= price:
					if types == 1:
						balance -= price
						user.update(user_id, 'CityBuildings', user.get(user_id, 'CityBuildings') + amount)
						user.update(user_id, 'CityPopulation', user.get(user_id, 'CityPopulation') + (population_plus * amount))
						user.update(user_id, 'dollars', balance)
						user.update(user_id, 'CityTaxes', user.get(user_id, 'CityTaxes') + (income * amount))
						await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ {amount} —à—Ç. <<{house}>> –∑–∞ {formarter(price)}$")
					elif types == 2:
						balance -= price
						happy = user.get(user_id, 'CityHappy')
						happy_low *= amount
						if happy >= happy_low:
							user.update(user_id, 'CityHappy', happy - happy_low)
						else:
							user.update(user_id, 'CityHappy', 0)
						user.update(user_id, 'CityBuildings', user.get(user_id, 'CityBuildings') + amount)
						user.update(user_id, 'dollars', balance)
						user.update(user_id, 'CityTaxes', user.get(user_id, 'CityTaxes') + (income * amount))
						user.update(user_id, 'CityServiceCosts', user.get(user_id, 'CityServiceCosts') + (service_costs * amount))
						await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ {amount} —à—Ç. <<{house}>> –∑–∞ {formarter(price)}$")
					elif types == 3:
						balance -= price
						happy = user.get(user_id, 'CityHappy')
						happy_up *= amount
						if happy <= 90:
							if happy_up > 10:
								user.update(user_id, 'CityHappy', 100)
							else:
								user.update(user_id, 'CityHappy', happy + happy_up)
						user.update(user_id, 'CityBuildings', user.get(user_id, 'CityBuildings') + amount)
						user.update(user_id, 'dollars', balance)
						user.update(user_id, 'CityTaxes', user.get(user_id, 'CityTaxes') + (income * amount))
						user.update(user_id, 'CityServiceCosts', user.get(user_id, 'CityServiceCosts') + (service_costs * amount))
						user.update(user_id, 'CityPopulation', user.get(user_id, 'CityPopulation') + (population_plus * amount))
						await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ {amount} —à—Ç. <<{house}>> –∑–∞ {formarter(price)}$")
					elif types == 4:
						balance -= price
						happy = user.get(user_id, 'CityHappy')
						happy_up *= amount
						if happy <= 90:
							if happy_up > 10:
								user.update(user_id, 'CityHappy', 100)
							else:
								user.update(user_id, 'CityHappy', happy + happy_up)
						user.update(user_id, 'CityBuildings', user.get(user_id, 'CityBuildings') + amount)
						user.update(user_id, 'dollars', balance)
						user.update(user_id, 'CityTaxes', user.get(user_id, 'CityTaxes') + (income * amount))
						user.update(user_id, 'CityPopulation', user.get(user_id, 'CityPopulation') + (population_plus * amount))
						await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ {amount} —à—Ç. <<{house}>> –∑–∞ {formarter(price)}$")
					elif types == 5:
						balance -= price
						happy = user.get(user_id, 'CityHappy')
						happy_low *= amount
						if happy >= happy_low:
							user.update(user_id, 'CityHappy', happy - happy_low)
						else:
							user.update(user_id, 'CityHappy', 0)
						user.update(user_id, 'CityBuildings', user.get(user_id, 'CityBuildings') + amount)
						user.update(user_id, 'dollars', balance)
						user.update(user_id, 'CityTaxes', user.get(user_id, 'CityTaxes') + (income * amount))
						user.update(user_id, 'CityEnergyCosts', user.get(user_id, 'CityEnergyCosts') + (service_costs * amount))
						await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ {amount} —à—Ç. <<{house}>> –∑–∞ {formarter(price)}$")
					elif types == 6:
						balance -= price
						happy = user.get(user_id, 'CityHappy')
						happy_up *= amount
						if happy <= 90:
							if happy_up > 10:
								user.update(user_id, 'CityHappy', 100)
							else:
								user.update(user_id, 'CityHappy', happy + happy_up)
						user.update(user_id, 'CityBuildings', user.get(user_id, 'CityBuildings') + amount)
						user.update(user_id, 'dollars', balance)
						user.update(user_id, 'CityTaxes', user.get(user_id, 'CityTaxes') + (income * amount))
						user.update(user_id, 'CityWaterCosts', user.get(user_id, 'CityWaterCosts') + (service_costs * amount))
						await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ {amount} —à—Ç. <<{house}>> –∑–∞ {formarter(price)}$")
					elif types == 7:
						balance -= price
						happy = user.get(user_id, 'CityHappy')
						happy_up *= amount
						if happy <= 90:
							if happy_up > 10:
								user.update(user_id, 'CityHappy', 100)
							else:
								user.update(user_id, 'CityHappy', happy + happy_up)
						user.update(user_id, 'CityBuildings', user.get(user_id, 'CityBuildings') + amount)
						user.update(user_id, 'dollars', balance)
						user.update(user_id, 'CityTaxes', user.get(user_id, 'CityTaxes') + (income * amount))
						await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ {amount} —à—Ç. <<{house}>> –∑–∞ {formarter(price)}$")
					else:
						await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ: –ì–æ—Ä (–ù–æ–º–µ—Ä –ø–æ—Å—Ç—Ä–æ–π–∫–∏)")
				else:
					await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è!")
			except:
				pass
		else:
			await message.answer("‚ùå –ê –º–æ–∂–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ <<–ù–∞—á–∞—Ç—å>>?")

	@bot.on.message(text = "—Å–æ–±—ã—Ç–∏–µ <number:int>")
	async def city_event(message: Message, number=1):
		user_id = message.from_id
		if user.check(user_id):
			balance = user.get(user_id, 'dollars')
			number = int(number)
			types = 1
			if number == 1:
				event = "–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –∫–æ–Ω—Ü–µ—Ä—Ç"
				price = 100000
				population_plus = randint(1,100)
			elif number == 2:
				event = "–Ø—Ä–º–∞—Ä–∫—É"
				price = 350000
				population_plus = randint(1,500)
			elif number == 3:
				event = "–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç–¥—ã—Ö"
				price = 750000
				happy_up = randint(1,5) 
				types = 2
			elif number == 4:
				event = "–ü–∞—Ä–∞–¥ –∫ 9 –º–∞—è"
				price = 1000000
				happy_up = randint(1,5)
				types = 2
			elif number == 5:
				event = "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ö–æ–¥"
				price = 1350000
				population_plus = randint(1,2000)
			elif number == 6:
				event = "–î–µ–Ω—å —ç–∫–æ–ª–æ–≥–∞"
				price = 2000000
				population_plus = randint(1,5000)
			try:
				last_time = user.get(user_id, 'CityEvent_time')
				now = floor(time.time())
				timer = now-last_time
				if timer >= 86400:
					if balance >= price:
						if types == 1:
							balance -= price
							user.update(user_id, 'dollars', balance)
							user.update(user_id, 'CityEvent_time', floor(time.time()))
							chance = randint(1,100)
							if chance <= 70:
								user.update(user_id, 'CityPopulation', user.get(user_id, 'CityPopulation') + population_plus)
								await message.answer(f"‚úÖ –í—ã –ø—Ä–æ–≤–µ–ª–∏ {event} –∏ –ø–æ–ª—É—á–∏–ª–∏ +{formarter(population_plus)} –Ω–æ–≤—ã—Ö –∂–∏—Ç–µ–ª–µ–π!")
							else:
								await message.answer(f"‚ùå –í—ã –ø—Ä–æ–≤–µ–ª–∏ —Å–æ–±—ã—Ç–∏–µ <<{event}>>, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å :<")
						else:
							balance -= price
							user.update(user_id, 'dollars', balance)
							user.update(user_id, 'CityEvent_time', floor(time.time()))
							chance = randint(1,100)
							if chance <= 50:
								if user.get(user_id, 'CityHappy') <= 95:
									user.update(user_id, 'CityHappy', user.get(user_id, 'CityHappy') + happy_up)
									await message.answer(f"‚úÖ –í—ã –ø—Ä–æ–≤–µ–ª–∏ {event} –∏ –ø–æ–ª—É—á–∏–ª–∏ +{formarter(happy_up)} —Å—á–∞—Å—Ç—å—è!")
								else:
									rand_bucks = randint(100000,350000)
									user.update(user_id, 'dollars', balance+rand_bucks)
									await message.answer(f"‚úÖ –í—ã –ø—Ä–æ–≤–µ–ª–∏ {event} –∏ –ø–æ–ª—É—á–∏–ª–∏ +{formarter(rand_bucks)}$!")
							else:
								await message.answer(f"‚ùå –í—ã –ø—Ä–æ–≤–µ–ª–∏ —Å–æ–±—ã—Ç–∏–µ <<{event}>>, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å :<")
					else:
						await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è!")
				else:
					format_time = time.gmtime(86400-timer)
					timer = time.strftime("%H —á–∞—Å. %M –º–∏–Ω. %S —Å–µ–∫.", format_time)
					await message.answer(f"‚è± –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ {timer}")
			except:
				pass
		else:
			await message.answer("‚ùå –ê –º–æ–∂–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ <<–ù–∞—á–∞—Ç—å>>?")

	@bot.on.message(text = "–Ω–∏–∫ <nick>")
	async def newnickname(message: Message, nick):
		user_id = message.from_id
		if user.check(user_id):
			now = user.get(user_id, 'tag')
			if len(nick) <= 20:
				if "[" in now:
					tag = f"[id{user_id}|{nick}]"
				else:
					tag = nick
				user.update(user_id, "tag", tag)
				await message.answer(f"üòè {tag}, –∫—Ä—É—Ç–æ–π –Ω–∏–∫–Ω–µ–π–º!")
			else:
				await message.answer("‚ùå –î–ª–∏–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 –°–∏–º–≤–æ–ª–æ–≤!")
		else:
			await message.answer("‚ùå –ê –º–æ–∂–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ <<–ù–∞—á–∞—Ç—å>>?")
	
	@bot.on.message(text = "–≥–∏–ø–µ—Ä")
	async def gipperlink(message):
		user_id = message.from_id
		if user.check(user_id):
			now = user.get(user_id, 'tag')
			if not "[" in now:
				tag = f"[id{user_id}|{now}]"
				user.update(user_id, 'tag', tag)
				await message.answer(f"‚úÖ {tag}, —Ç–µ–ø–µ—Ä—å –≤–∞—à –Ω–∏–∫–Ω–µ–π–º —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É!")
			else:
				tag = "".join(now.split("|")[1]).split("]")[0]
				user.update(user_id, 'tag', tag)
				await message.answer(f"‚ùå {tag}, —Ç–µ–ø–µ—Ä—å –≤–∞—à –Ω–∏–∫–µ–Ω–π–º –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É!")
		else:
			await message.answer("‚ùå –ê –º–æ–∂–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ <<–ù–∞—á–∞—Ç—å>>?")


	@bot.on.message(text = "–∞–≤—Ç–æ–∏–Ω–≤–µ—Å—Ç")
	async def autoinvest(message):
		user_id = message.from_id
		if user.check(user_id):
			if user.get(user_id, 'autoinvest'):
				user.update(user_id, 'autoinvest', 0)
				await message.answer("‚ùå –ê–≤—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ!")
			else:
				user.update(user_id, 'autoinvest', 1)
				await message.answer("‚úÖ –ê–≤—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ!")
		else:
			await message.answer("‚ùå –ê –º–æ–∂–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ <<–ù–∞—á–∞—Ç—å>>?")

	@bot.on.message(text = ["—Ä–µ—Ñ <amount>", "—Ä–µ—Ñ <amount:int>"])
	async def newrefbonus(message: Message, amount=1):
		user_id = message.from_id
		if user_id in admin_ids:
			try:
				try:
					amount = number_format(amount)
				except:
					amount = 150000
				globals.update("ref_bonus", amount)
				await message.answer(f"üë• –¢–µ–ø–µ—Ä—å –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {formater(amount)} VK Coin")
			except:
				pass

	@bot.on.message(text = ["–±–æ–Ω—É—Å <amount>", "–±–æ–Ω—É—Å <amount:int>"])
	async def newbonus(message: Message, amount=1):
		user_id = message.from_id
		if user_id in admin_ids:
			try:
				try:
					amount = number_format(amount)
				except:
					amount = 200000
				globals.update("bonus_max", amount)
				await message.answer(f"üéÅ –¢–µ–ø–µ—Ä—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: {formarter(amount)} VK Coin")
			except:
				pass

	@bot.on.message(text = ["–ø–æ–¥–ø–∏—Å–∫–∞ <amount>", "–ø–æ–¥–ø–∏—Å–∫–∞ <amount:int>"])
	async def newsubbonus(message: Message, amount=1):
		user_id = message.from_id
		if user_id in admin_ids:
			try:
				try:
					amount = number_format(amount)
				except:
					amount = 100000
				globals.update("sub_bonus", amount)
				await message.answer(f"üî• –¢–µ–ø–µ—Ä—å –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É: {formarter(amount)} VK Coin")
			except:
				pass

	@bot.on.message(text = ["–≤—ã–¥–∞—Ç—å <id:int> <amount>", "–≤—ã–¥–∞—Ç—å <id:int> <amount:int>", "–≤—ã–¥–∞—Ç—å <id> <amount>", "–≤—ã–¥–∞—Ç—å <id> <amount:int>", "–≤—ã–¥–∞—Ç—å <amount>", "–≤—ã–¥–∞—Ç—å <amount:int>"])
	async def give(message: Message, id=0, amount=1):
		user_id = message.from_id
		if user_id in admin_ids:
			try:
				id = message.reply_message.from_id
			except:
				try:
					id = int(id)
				except:
					try:
						id = int("".join(id.split("|")[:-1]).split("id")[1])
					except:
						id = 0
			if id > 0:
				try:
					amount = number_format(amount)
				except:
					amount = 0
				if amount > 0:
					try:
						user.update(id, 'invest_balance', user.get(id, 'invest_balance') + amount)
						tag = user.get(id, 'tag')
						if "[" in tag:
							await message.answer(f"üí∏ –ò–≥—Ä–æ–∫—É {tag} –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ {formarter(amount)} VK Coin –Ω–∞ –∏–Ω–≤–µ—Å—Ç. –±–∞–ª–∞–Ω—Å")
						else:
							await message.answer(f"üí∏ [id{id}|–ò–≥—Ä–æ–∫—É] –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ {formarter(amount)} VK Coin –Ω–∞ –∏–Ω–≤–µ—Å—Ç. –±–∞–ª–∞–Ω—Å")
					except:
						await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω :<")
				else:
					await message.answer("‚ùå –°–º—ã—Å–ª –≤—ã–¥–∞—á–∏ 0 VK Coin?)")
			else:
				await message.answer("‚ùå –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π VK ID!")

	@bot.on.message(text = ["–æ–±–Ω—É–ª–∏—Ç—å <id>", "–æ–±–Ω—É–ª–∏—Ç—å <id:int>", "–æ–±–Ω—É–ª–∏—Ç—å"])
	async def go_default(message: Message, id=0):
		user_id = message.from_id
		if user_id in admin_ids:
			try:
				id = message.reply_message.from_id
			except:
				try:
					id = int(id)
				except:
					try:
						id = int("".join(id.split("|")[:-1]).split("id")[1])
					except:
						id = 0
			if id > 0:
				try:
					user.update(id, 'invest_balance', 0)
					tag = user.get(user_id, 'tag')
					if "[" in tag:
						await message.answer(f"üòì –ò–≥—Ä–æ–∫ {user.get(id, 'tag')} –ª–∏—à–∏–ª—Å—è –∏–Ω–≤–µ—Å—Ç. –±–∞–ª–∞–Ω—Å–∞")
					else:
						await message.answer(f"üòì [id{id}|–ò–≥—Ä–æ–∫] –ª–∏—à–∏–ª—Å—è –∏–Ω–≤–µ—Å—Ç. –±–∞–ª–∞–Ω—Å–∞")
				except:
					await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω :<")
			else:
				await message.answer("‚ùå –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π VK ID!")

	@bot.on.message(text = ["–∞–∫—Ü–∏—è <x:int>", "–∞ <x:int>"])
	async def promotion_start(message: Message, x=1):
		user_id = message.from_id
		if user_id in admin_ids:
			globals.update('mnozhitel', x)
			await message.answer(f"ü§ë –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç 200 000 VK Coin, –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏—Ç –≤ {x}x —Ä–∞–∑ –±–æ–ª—å—à–µ!")

	@bot.on.message(text = ["–ø–µ—Ä–µ–≤–æ–¥—ã <id>", "–ø–µ—Ä–µ–≤–æ–¥—ã <id:int>", "–ø <id>", "–ø <id:int>", "–ø–µ—Ä–µ–≤–æ–¥—ã", "–ø"])
	async def transactions(message: Message, id=0):
		user_id = message.from_id
		if user_id in admin_ids:
			try:
				id = message.reply_message.from_id
			except:
				try:
					id = int(id)
				except:
					try:
						id = int("".join(id.split("|")[:-1]).split("id")[1])
					except:
						id = 0
			if id > 0:
				transactions = merchant.get_transactions(tx=[1])
				text = f"üí≤ –ü–µ—Ä–µ–≤–æ–¥—ã –æ—Ç {user.get(id, 'tag')}:\n"
				amounts = 0
				for num, us in enumerate(transactions):
					if us['from_id'] == id:
						amount = floor(int(us['amount']) / 1000)
						amounts += amount
						data = time.strftime("%m-%d %H:%M:%S", time.gmtime(int(us['created_at'])))
						text += f"üí∏ VKC: {formarter(amount)} ({data})\n"
				await message.answer(f"{text}\nüí∞ +{formarter(amounts)} VK Coin")
			else:
				await message.answer("‚ùå –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π VK ID!")

	@bot.on.message()
	async def main(message):
		text = message.text.lower()
		user_id = message.from_id
		if user.check(user_id):
			tag = user.get(user_id, 'tag')
			if text in ["–ø—Ä–æ—Ñ", "–ø—Ä–æ—Ñ–∏–ª—å", "üë§ –ø—Ä–æ—Ñ–∏–ª—å", "üìí –ø—Ä–æ—Ñ–∏–ª—å"]:
				invest_balance = user.get(user_id, 'invest_balance')
				last_time = user.get(user_id, 'last_time')
				if last_time == 0:
					last_time = floor(time.time())
					user.update(user_id, 'last_time', last_time)
				now = floor(time.time())
				cash = user.get(user_id, 'dohod_everyday')
				cash_hours = floor(cash/86400*3600)
				cash_hours = 1 if cash_hours < 1 else cash_hours
				balance = user.get(user_id, 'balance')
				timer = now - last_time
				if timer >= 3600:
					cash_get = floor(timer/3600*cash_hours)
					if user.get(user_id, 'autoinvest'):
						all_invest = user.get(user_id, 'all_invest')
						invest_balance += cash_get
						if invest_balance >= 1000:
							all_invest += invest_balance
							invest = floor(invest_balance/30) if user.get(user_id, 'vip') == 1 else floor(invest_balance/35)
							cash += invest
							user.update(user_id, 'dohod_everyday', cash)
							user.update(user_id, 'invest_balance', 0)
							user.update(user_id, 'all_invest', all_invest)
							user.update(user_id, 'all_invest_week', user.get(user_id, 'all_invest_week') + invest_balance)
							user.update(user_id, 'last_time', floor(time.time()))
							invest_balance = 0
						else:
							balance += cash_get
							user.update(user_id, 'balance', balance)
							user.update(user_id, 'last_time', floor(time.time()))
					else:
						balance += cash_get
						user.update(user_id, 'balance', balance)
						user.update(user_id, 'last_time', floor(time.time()))
				vip = "‚úî" if user.get(user_id, 'vip') else "üö´"
				await message.answer(f"""üìí {user.get(user_id, 'tag')}:
‚†Äüí∏ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: {formarter(invest_balance)} VK Coin
‚†Äüî• –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {formarter(balance)} VK Coin
‚†Ä‚è≤ –í —á–∞—Å: {formarter(cash_hours)} VK Coin

üí∞ –î–æ–ª–ª–∞—Ä–æ–≤: {formarter(user.get(user_id, 'dollars'))}$
üëë VIP –°—Ç–∞—Ç—É—Å: {vip}"""	, keyboard=profile_keyboard)

			elif text in ["–º–µ–Ω—é", "–º"]:
				await message.answer("üìÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", keyboard=menu_keyboard)

			elif text == "‚öô –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
				await message.answer("""‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:

üìí –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
‚†Äüë§ –ù–∏–∫ [–ù–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º] - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º
‚†Äüìå –ì–∏–ø–µ—Ä - –≤–∫–ª/–≤—ã–∫–ª –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –≤ –Ω–∏–∫–µ

üìö –î—Ä—É–≥–æ–µ:
‚†Äüìà –ê–≤—Ç–æ–∏–Ω–≤–µ—Å—Ç - –≤–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ <<–±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞>>""")

			elif text in ["üìà –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", "–∏–Ω–≤–µ—Å—Ç", "–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", "üìà –∏–Ω–≤–µ—Å—Ç"]:
				invest_balance = user.get(user_id, 'invest_balance')
				all_invest = user.get(user_id, 'all_invest')
				if invest_balance >= 1000:
					cash = user.get(user_id, 'dohod_everyday')
					all_invest += invest_balance
					invest = floor(invest_balance/30) if user.get(user_id, 'vip') == 1 else floor(invest_balance/35)
					cash += invest
					user.update(user_id, 'dohod_everyday', cash)
					user.update(user_id, 'invest_balance', 0)
					user.update(user_id, 'all_invest', all_invest)
					user.update(user_id, 'all_invest_week', user.get(user_id, 'all_invest_week') + invest_balance)
					await message.answer(f"""üí∏ {tag}, –≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ {formarter(invest_balance)} VK Coin
‚è≤ –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: {formarter(floor(cash/86400*3600))} VKC/–ß–∞—Å""")
				else:
					await message.answer(f"üí∏ {tag}, –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –æ—Ç 1000 VK Coin")

			elif text in ["üëë", "–≤–∏–ø", "–≤–∏–ø–∫–∞"]:
				if not user.get(user_id, 'vip'):
					await message.answer("""üëë –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ VIP –°—Ç–∞—Ç—É—Å–∞:
- –ë–æ–ª—å—à–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏;
- 1% –æ—Ç —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞ (–î–æ 500 000 VK Coin) –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å;
- –û—Ç–º–µ—Ç–∫–∞ –≤ —Ç–æ–ø–∞—Ö;

üí∏ –¶–µ–Ω–∞: 8 500 000 VK Coin""", keyboard=vip_keyboard)
				else:
					await message.answer("üëë –£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è VIP –°—Ç–∞—Ç—É—Å :)")

			elif text == "‚úî –∫—É–ø–∏—Ç—å vip":
				if not user.get(user_id, 'vip'):
					invest_balance = user.get(user_id, 'invest_balance')
					if invest_balance >= 8500000:
						invest_balance -= 8500000
						user.update(user_id, 'invest_balance', invest_balance)
						user.update(user_id, 'vip', 1)
						await message.answer(f"‚úî {tag}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É VIP –°—Ç–∞—Ç—É—Å–∞! –¢–µ–ø–µ—Ä—å –≤—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—â—ë –æ–¥–Ω–∏–º –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º VIP :)")
					else:
						await message.answer(f"üí∞ –ù–µ—Ö–≤–∞—Ç–∫–∞ {formarter(8500000 - invest_balance)} VK Coin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VIP!")
				else:
					await message.answer("üëë –£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è VIP –°—Ç–∞—Ç—É—Å :)")

			elif text in ["–≤—ã–≤–æ–¥", "–≤—ã–≤–µ—Å—Ç–∏", "üì§ –≤—ã–≤–µ—Å—Ç–∏", "üì§ –≤—ã–≤–æ–¥"]:
				vip = user.get(user_id, 'vip')
				balance = user.get(user_id, 'balance')
				rezerv_s = floor(rezerv())
				if balance >= 1:
					if rezerv_s > balance:
						user.update(user_id, 'balance', 0)
						if vip:
							if balance <= 500000:
								procent=floor(balance/100)
								user.update(user_id, 'invest_balance', user.get(user_id, 'invest_balance') + procent)
						merchant.send_payment(to_id=user_id, amount=balance*1000, mark_as_merchant=True)
						await message.answer(f"""üî• –ë—ã–ª–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {formarter(balance)} VK Coin :)
ü•∫ –ú–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤? - https://vk.cc/ccFl2i""")
						if not user_id in admin_ids:
							if "[" in tag:
								await bot.api.messages.send(peer_id=2000000001, message=f"""üò≠ –ù–æ–≤—ã–π –≤—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É {formarter(balance)} VK Coin
üë§: {tag}""", random_id=randint(-1000000000,1000000000))
							else:
								await bot.api.messages.send(peer_id=2000000001, message=f"""üò≠ –ù–æ–≤—ã–π –≤—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É {formarter(balance)} VK Coin
üë§: [id{user_id}|{tag}]""", random_id=randint(-1000000000,1000000000))
					else:
						await message.answer("üò≤ –ù–∞ –±–∞–ª–∞–Ω—Å–µ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞")
				else:
					await message.answer(f"ü•∫ {tag}, –≤–∞—à –±–∞–ª–∞–Ω—Å –ø—É—Å—Ç :(")

			elif text in ["–∞–¥–º–∏–Ω–∫–∞", "–∞–¥–º–∏–Ω", "–∞–¥–º"]:
				if user_id in admin_ids:
					await message.answer(f"""üìÑ {tag}, —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥:
‚†Äüí∞ –í—ã–¥–∞—Ç—å (VK ID) (–°—É–º–º–∞)
‚†Äüí∏ –û–±–Ω—É–ª–∏—Ç—å (VK ID)
‚†Ä‚úÖ –ê–∫—Ü–∏—è (–ú–Ω–æ–∂–∏—Ç–µ–ª—å) | –ê (–ú–Ω–æ–∂–∏—Ç–µ–ª—å)
‚†Äüö´ –ê–∫—Ü–∏—è —Å—Ç–æ–ø | –ê—Å
‚†Äüí≥ –†–µ–∑–µ—Ä–≤ | –†–µ–∑
‚†Äüí≤ –ü–µ—Ä–µ–≤–æ–¥—ã (VK ID) | –ü (VK ID)
---------------------------------------------
‚†Äüë• –†–µ—Ñ (–°—É–º–º–∞)
‚†ÄüéÅ –ë–æ–Ω—É—Å (–°—É–º–º–∞)
‚†Äüî• –ü–æ–¥–ø–∏—Å–∫–∞ (–°—É–º–º–∞)""")
			
			elif text in ["–∞–∫—Ü–∏—è —Å—Ç–æ–ø", "–∞—Å"]:
				if user_id in admin_ids:
					globals.update("mnozhitel", 1)
					await message.answer(f"‚ùå –ê–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ, –∫—Ç–æ –Ω–µ —É—Å–ø–µ–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å –∞–∫—Ü–∏–µ–π - –ª–æ—à–∫–∏ :>")

			elif text in ["—Ä–µ–∑–µ—Ä–≤", "—Ä–µ–∑"]:
				if user_id in admin_ids:
					await message.answer(f"""üåÄ: {formarter(rezerv())} VK Coin""")

			elif text in ["—Ä–µ—Ñ", "—Ä–µ—Ñ–∫–∞", "—Ä–µ—Ñ–µ—Ä–∞–ª", "—Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞", "üë• —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞", "üé´"]:
				await message.answer(f"""üé´ {user.get(user_id, 'tag')}, –∑–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: {formarter(globals.get("ref_bonus"))} VK Coin.
üìå –°—Å—ã–ª–∫–∞: https://vk.me/public212419708?ref={user_id}""")

			elif text in ["—Ç–æ–ø", "—Ç–æ–ø—ã", "üèÜ —Ç–æ–ø—ã"]:
				await message.answer("‚ùî –ö–∞–∫–æ–π —Ç–æ–ø –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", keyboard=top_keyboard)

			elif text == "üí∏ –ø–æ –¥–æ—Ö–æ–¥—É":
				users = user.get_top('dohod_everyday', None)
				text = "üí∏ –¢–æ–ø –ø–æ –¥–æ—Ö–æ–¥—É VKC/–°—É—Ç–∫–∏:\n\n"
				for num, us in enumerate(users):
					if num <= 9:
						text += f"\n{top[num]} üëë {us['tag']} - {formarter(us['dohod_everyday'])} VK Coin" if us['vip'] else f"\n{top[num]} {us['tag']} - {formarter(us['dohod_everyday'])} VK Coin"
					else:
						if us['vk_id'] == user_id:
							text += f"\n------------------------------------------------------\nüî¢ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ {num+1} –º–µ—Å—Ç–µ, –∏–º–µ—è –¥–æ—Ö–æ–¥: {formarter(us['dohod_everyday'])} VKC/–°—É—Ç–∫–∏"
							break
				await message.answer(text)

			elif text == "‚è≥ —Ç–æ–ø –Ω–µ–¥–µ–ª–∏":
				users = user.get_top('all_invest_week', None)
				text = "‚è≥ –¢–æ–ø –ø–æ –∏–Ω–≤–µ—Å—Ç—É –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
				for num, us in enumerate(users):
					if num <= 9:
						text += f"\n{top[num]} üëë {us['tag']} - {formarter(us['all_invest_week'])} VK Coin" if us['vip'] else f"\n{top[num]} {us['tag']} - {formarter(us['all_invest_week'])} VK Coin"
					else:
						if us['vk_id'] == user_id:
							text += f"\n------------------------------------------------------\nüî¢ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ {num+1} –º–µ—Å—Ç–µ, –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–≤: {formarter(us['all_invest_week'])} VKC"
							break
				await message.answer(text)
			elif text == "üìë –æ–±—â–∏–π —Ç–æ–ø":
				users = user.get_top('all_invest', None)
				text = "üí∏ –¢–æ–ø –ø–æ –∏–Ω–≤–µ—Å—Ç—É –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n\n"
				for num, us in enumerate(users):
					if num <= 9:
						text += f"\n{top[num]} üëë {us['tag']} - {formarter(us['all_invest'])} VK Coin" if us['vip'] else f"\n{top[num]} {us['tag']} - {formarter(us['all_invest'])} VK Coin"
					else:
						if us['vk_id'] == user_id:
							text += f"\n------------------------------------------------------\nüî¢ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ {num+1} –º–µ—Å—Ç–µ, –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–≤: {formarter(us['all_invest'])} VKC"
							break
				await message.answer(text)

			elif text == "üí∞ –ø–æ –¥–æ–ª–ª–∞—Ä–∞–º":
				users = user.get_top('dollars', None)
				text = "üí∞ –¢–æ–ø –ø–æ –¥–æ–ª–ª–∞—Ä–∞–º:\n\n"
				for num, us in enumerate(users):
					if num <= 9:
						text += f"\n{top[num]} üëë {us['tag']} - {formarter(us['dollars'])}$" if us['vip'] else f"\n{top[num]} {us['tag']} - {formarter(us['dollars'])}$"
					else:
						if us['vk_id'] == user_id:
							text += f"\n------------------------------------------------------\nüî¢ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ {num+1} –º–µ—Å—Ç–µ, –∏–º–µ—è: {formarter(us['dollars'])}$"
							break
				await message.answer(text)

			elif text == "üè¢ –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é –≥–æ—Ä–æ–¥–∞":
				users = user.get_citytop()
				text = "üè¢ –¢–æ–ø –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é –≥–æ—Ä–æ–¥–∞:\n\n"
				for num, us in enumerate(users):
					if num <= 9:
						text += f"\n{top[num]} üëë –£ {us['tag']} - {formarter(us['CityPopulation'])} —á–µ–ª." if us['vip'] else f"\n{top[num]} –£ {us['tag']} - {formarter(us['CityPopulation'])} —á–µ–ª."
					else:
						if us['vk_id'] == user_id:
							text += f"\n------------------------------------------------------\nüî¢ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ {num+1} –º–µ—Å—Ç–µ, –∏–º–µ—è –Ω–∞—Å–µ–ª–µ–Ω–∏–µ: {formarter(us['CityPopulation'])} —á–µ–ª."
							break
				await message.answer(text)

			elif text == "—Ç–æ–ø –ø–æ–ø":
				if user_id in admin_ids:
					users = user.get_top('all_topup', 30)
					text = "üî• –¢–æ–ø –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º:\n\n"
					for num, us in enumerate(users):
						place = f"üèÖ {num+1}" if num >= 10 else top[num]
						text += f"{place} üëë {us['tag']} - {formarter(us['all_topup'])} VK Coin\n" if us['vip'] else f"{place} {us['tag']} - {formarter(us['all_topup'])} VK Coin\n"
					await message.answer(text)

			elif text in ["–±–æ–Ω—É—Å", "üéÅ –±–æ–Ω—É—Å", "üéÅ"]:
				all_topup = user.get(user_id, 'all_topup')
				if all_topup >= 2000000:
					bonus_time = user.get(user_id, 'bonus_time')
					now = floor(time.time())
					timer = now - bonus_time
					if timer >= 86400:
						rand = randint(1, globals.get("bonus_max"))
						user.update(user_id, 'invest_balance', user.get(user_id, 'invest_balance') + rand)
						user.update(user_id, 'bonus_time', floor(time.time()))
						await message.answer(f"üéÅ {tag}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏: {formarter(rand)} VK Coin")
					else:
						format_time = time.gmtime(86400 - timer)
						timer = time.strftime("%H —á–∞—Å. %M –º–∏–Ω. %S —Å–µ–∫.", format_time)
						await message.answer(f"‚è± {tag}, —Å–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑: {timer}")
				else:
					await message.answer(f"üì• –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å: {formarter(2000000 - all_topup)} VK Coin")
			
			elif text in ["–ø–æ–ø–æ–ª–Ω–∏—Ç—å", "üì• –ø–æ–ø–æ–ª–Ω–∏—Ç—å"]:
				await message.answer(f"üì• https://vk.com/coin#x705783864_1000_1337_1")

			elif text in ["—Å—Ç–∞—Ç", "—Å—Ç–∞—Ç–∞"]:
				await message.answer(f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚†Äüë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä—Ä–æ–≤–∞–Ω–æ: {formarter(user.counts())} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚†Äüí∞ –ë–∞–ª–∞–Ω—Å: {formarter(rezerv())} VK Coin
""")

			elif text in ["üî• –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å", "–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å", "–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å", "–∂–µ—Ä—Ç–≤–∞", "–∂–µ—Ä—Ç–≤—ã"]:
				await message.answer("üôÉ –ö–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å?)", keyboard=donate_keyboard)

			elif text in ["—Ç–æ–ø–Ω–µ–¥–µ–ª—è" "—Ç–æ–ø–Ω–µ–¥–µ–ª—è"]:
				if user_id in admin_ids:
					now = floor(time.time())
					time_format = time.gmtime(now)
					now = time.strftime("%A", time_format)
					now_time = time.strftime("%H", time_format)
					if now == "Sunday" and now_time == 17:
						users = user.get_top("all_invest_week", 10)
						text = "üî• –ò—Ç–æ–≥–∏ —Ç–æ–ø–∞ –ø–æ –∏–Ω–≤–µ—Å—Ç—É –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
						for num, us in enumerate(users):
							id = us['vk_id']
							prize = floor(us['all_invest_week']/100*5)
							user.update(id, 'invest_balance', user.get(id, 'invest_balance') + prize)
							text += f"\n{top[num]} {us['tag']} - {formarter(us['all_invest_week'])} VK Coin (–ü—Ä–∏–∑: {formarter(prize)} VKC)"
						user.uni_update('all_invest_week', 0)
						await message.answer(f"{text}\n\nü§ë –í—Å–µ –ø—Ä–∏–∑—ã –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å! –°–ª–µ–¥—É—é—â–µ–µ –∏—Ç–æ–≥–∏ –±—É–¥—É—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–µ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ.")
					else:
						await message.answer("üèÜ –ü–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ —Ç–æ–ø–∞ –ø–æ –∏–Ω–≤–µ—Å—Ç—É –∑–∞ –Ω–µ–¥–µ–ª—é –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00 –ü–æ –ú—Å–∫!")

			elif text in ["—Ä–µ—Å", "—Ä–µ—Å—Ç"]:
				if user_id in admin_ids:
					threading.Thread(target=start_vkc).start()
					await message.answer("‚úÖ –¢–µ–ø–µ—Ä—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è VKC —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ!")

			elif text in ["qiwires", "resqiwi"]:
				if user_id == admin_ids[0]:
					threading.Thread(target=start_qiwi).start()
					await message.answer("‚úÖ –¢–µ–ø–µ—Ä—å –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ QIWI —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ!")

			elif text in ["–≥–æ—Ä–æ–¥", "üè¢", "–≥–æ—Ä", "—Å–∏—Ç–∏", "city"]:
				text = ""
				CityBuildings = user.get(user_id, 'CityBuildings')
				CityPopulation = user.get(user_id, 'CityPopulation')
				CityHappy = user.get(user_id, "CityHappy")
				CityTaxes = user.get(user_id, 'CityTaxes')
				CityWaterCosts = user.get(user_id, 'CityWaterCosts')
				CityEnergyCosts = user.get(user_id, 'CityEnergyCosts')
				CityServiceCosts = user.get(user_id, 'CityServiceCosts')
				if CityPopulation <= 100000 and CityTaxes >= 1000000000:
					CityTaxes = floor(CityTaxes / 1.2)
				elif CityPopulation > 100000 and CityPopulation <= 350000 and CityTaxes >= 1000000000:
					CityTaxes = floor(CityTaxes / 1.2)
				elif CityPopulation > 350000 and CityPopulation <= 700000 and CityTaxes >= 4000000000:
					CityTaxes = floor(CityTaxes / 1.2)
				elif CityPopulation > 700000 and CityPopulation <= 1000000 and CityTaxes >= 5000000000:
					CityTaxes = floor(CityTaxes / 1.2)
				elif CityPopulation > 1000000 and CityPopulation <= 5000000 and CityTaxes >= 8000000000:
					CityTaxes = floor(CityTaxes / 1.2)
				elif CityPopulation > 5000000 and CityPopulation <= 8000000 and CityTaxes >= 9000000000:
					CityTaxes = floor(CityTaxes / 1.3)
				elif CityPopulation > 8000000 and CityPopulation <= 12000000 and CityTaxes >= 15000000000:
					CityTaxes = floor(CityTaxes / 1.3)
				elif CityPopulation > 12000000 and CityPopulation <= 20000000 and CityTaxes >= 20000000000:
					CityTaxes = floor(CityTaxes / 1.3)
				elif CityPopulation > 20000000 and CityPopulation <= 50000000 and CityTaxes >= 30000000000:
					CityTaxes = floor(CityTaxes / 1.4)
				elif CityPopulation > 50000000 and CityPopulation <= 100000000 and CityTaxes >= 50000000000:
					CityTaxes = floor(CityTaxes / 1.4)
				CityTaxesNonCosts = CityTaxes - CityWaterCosts - CityEnergyCosts - CityServiceCosts
				if CityWaterCosts == 0:
					text += "\n‚ùå –ü–æ—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è-–±—ã –í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω—É—é –±–∞—à–Ω—é –¥–ª—è –¥–æ–±—ã—á–∏ –≤–æ–¥—ã!"
				if CityEnergyCosts == 0:
					text += "\n‚ùå –ü–æ—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è-–±—ã –í–µ—Ç—Ä—è–Ω—É—é —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—é –¥–ª—è –¥–æ–±—ã—á–∏ —ç–Ω–µ—Ä–≥–∏–∏!"
				if CityServiceCosts == 0:
					text += "\n‚ùå –ü–æ—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è-–±—ã –î–µ—Ç—Å–∫–∏–π —Å–∞–¥ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è!"
				if CityHappy > 2 and CityHappy <= 40:
					text += "\n‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç —Å—á–∞—Å—Ç—å—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –º–µ–Ω—å—à–µ 40! –°–∫–æ—Ä–æ –ª—é–¥–∏ –Ω–∞—á–Ω—É—Ç —Å—ä–µ–∑–∂–∞—Ç—å —Å –≤–∞—à–µ–≥–æ –ø–æ—Å–µ–ª–µ–Ω–∏—è!"
					chance = randint(1,100)
					if chance <= 40:
						if CityPopulation >= 100 and CityPopulation < 10000:
							CityPopulation -= randint(1,80)
						elif CityPopulation >= 10000:
							CityPopulation -= randint(1,5000)
						elif CityPopulation >= 1 and CityPopulation < 100:
							CityPopulation -= 1
						user.update(user_id, 'CityPopulation', CityPopulation)
				if CityWaterCosts > 0 and CityEnergyCosts > 0:
					chance = randint(1,100)
					if CityPopulation > 20 and CityPopulation <= 1000:
						if CityWaterCosts < 50000:
							text += "\n‚ùå –í –≥–æ—Ä–æ–¥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–æ–¥—ã! –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –í–æ–¥–æ—Å–Ω–∞–±–∂–∞—é—â—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É!"
							if chance <= 30:
								CityPopulation -= randint(1,20)
								user.update(user_id, 'CityPopulation', CityPopulation)
						if CityEnergyCosts < 50000:
							text += "\n‚ùå –í –≥–æ—Ä–æ–¥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞! –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≠–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–∞—é—â—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É!"
							if chance <= 30:
								CityPopulation -= randint(1,20)
								user.update(user_id, 'CityPopulation', CityPopulation)
					elif CityPopulation > 10000 and CityPopulation <= 50000:
						if CityWaterCosts < 150000:
							text += "\n‚ùå –í –≥–æ—Ä–æ–¥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–æ–¥—ã! –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –í–æ–¥–æ—Å–Ω–∞–±–∂–∞—é—â—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É!"
							if chance <= 30:
								CityPopulation -= randint(1,3500)
								user.update(user_id, 'CityPopulation', CityPopulation)
						if CityEnergyCosts < 150000:
							text += "\n‚ùå –í –≥–æ—Ä–æ–¥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞! –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≠–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–∞—é—â—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É!"
							if chance <= 30:
								CityPopulation -= randint(1,3500)
								user.update(user_id, 'CityPopulation', CityPopulation)
					elif CityPopulation > 50000 and CityPopulation <= 100000:
						if CityWaterCosts < 250000:
							text += "\n‚ùå –í –≥–æ—Ä–æ–¥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–æ–¥—ã! –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –í–æ–¥–æ—Å–Ω–∞–±–∂–∞—é—â—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É!"
							if chance <= 30:
								CityPopulation -= randint(1,10000)
								user.update(user_id, 'CityPopulation', CityPopulation)
						if CityEnergyCosts < 250000:
							text += "\n‚ùå –í –≥–æ—Ä–æ–¥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞! –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≠–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–∞—é—â—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É!"
							if chance <= 30:
								CityPopulation -= randint(1,10000)
								user.update(user_id, 'CityPopulation', CityPopulation)
					elif CityPopulation > 100000 and CityPopulation <= 500000:
						if CityWaterCosts < 450000:
							text += "\n‚ùå –í –≥–æ—Ä–æ–¥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–æ–¥—ã! –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –í–æ–¥–æ—Å–Ω–∞–±–∂–∞—é—â—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É!"
							if chance <= 30:
								CityPopulation -= randint(1,30000)
								user.update(user_id, 'CityPopulation', CityPopulation)
						if CityEnergyCosts < 450000:
							text += "\n‚ùå –í –≥–æ—Ä–æ–¥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞! –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≠–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–∞—é—â—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É!"
							if chance <= 30:
								CityPopulation -= randint(1,30000)
								user.update(user_id, 'CityPopulation', CityPopulation)
					elif CityPopulation > 500000 and CityPopulation <= 1000000:
						if CityWaterCosts < 800000:
							text += "\n‚ùå –í –≥–æ—Ä–æ–¥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–æ–¥—ã! –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –í–æ–¥–æ—Å–Ω–∞–±–∂–∞—é—â—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É!"
							if chance <= 30:
								CityPopulation -= randint(1,50000)
								user.update(user_id, 'CityPopulation', CityPopulation)
						if CityEnergyCosts < 800000:
							text += "\n‚ùå –í –≥–æ—Ä–æ–¥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞! –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≠–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–∞—é—â—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É!"
							if chance <= 30:
								CityPopulation -= randint(1,50000)
								user.update(user_id, 'CityPopulation', CityPopulation)
				chance = randint(1,100)
				if chance <= 10:
					if CityPopulation >= 100 and CityPopulation < 1000:
						rand = randint(1,20)
						CityPopulation -= rand
						CityBuildings -= 1
						user.update(user_id, 'CityPopulation', CityPopulation)
						user.update(user_id, 'CityBuildings', CityBuildings)
						text += f"\n‚ùå –í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ —Å–≥–æ—Ä–µ–ª –¥–æ–º! –ü–æ–≥–∏–±–ª–æ: {rand} —á–µ–ª."
					elif CityPopulation >= 1000 and CityPopulation < 10000:
						rand = randint(1,200)
						CityPopulation -= rand
						CityBuildings -= randint(1,5) if CityBuildings >= 5 else 1
						user.update(user_id, 'CityPopulation', CityPopulation)
						user.update(user_id, 'CityBuildings', CityBuildings)
						text += f"\n‚ùå –í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ —Å–≥–æ—Ä–µ–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–º–æ–≤! –ü–æ–≥–∏–±–ª–æ: {rand} —á–µ–ª."
					elif CityPopulation >= 10000 and CityPopulation < 100000:
						rand = randint(1,2000)
						CityPopulation -= rand
						CityBuildings -= randint(1,20) if CityBuildings >= 20 else 5
						user.update(user_id, 'CityPopulation', CityPopulation)
						user.update(user_id, 'CityBuildings', CityBuildings)
						text += f"\n‚ùå –°–ª—É—á–∏–ª–æ—Å—å –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–µ! –ü–æ–≥–∏–±–ª–æ: {rand} —á–µ–ª."
					elif CityPopulation >= 100000 and CityPopulation <= 500000:
						rand = randint(1,20000)
						CityPopulation -= rand
						CityBuildings -= randint(1,100) if CityBuildings >= 100 else 10
						user.update(user_id, 'CityPopulation', CityPopulation)
						user.update(user_id, 'CityBuildings', CityBuildings)
						text += f"\n‚ùå –ü—Ä–∏—à–ª–æ —Ü—É–Ω–∞–º–∏ –∏ —É–±–∏–ª–æ {rand} —á–µ–ª.!"
					elif CityPopulation > 500000:
						rand = randint(1,100000)
						CityPopulation -= rand
						CityBuildings -= randint(1,1000) if CityBuildings >= 1000 else 50
						user.update(user_id, 'CityPopulation', CityPopulation)
						user.update(user_id, 'CityBuildings', CityBuildings)
						text += f"\n‚ùå –£–ø–∞–ª –º–µ—Ç–µ–æ—Ä–∏—Ç –∏ —É–±–∏–ª {rand} —á–µ–ª.!"
				CityCoffers = user.get(user_id, 'CityCoffers')
				CityTime = user.get(user_id,  'City_time')
				now = time.time()
				timer = now-CityTime
				if timer >= 3600:
					taxes_get = floor(timer/3600*CityTaxesNonCosts)
					CityCoffers += taxes_get
					user.update(user_id, 'CityCoffers', CityCoffers)
					user.update(user_id, 'City_time', floor(time.time()))
				await message.answer(f"""üè¢ {user.get(user_id, 'tag')}, –≤–∞—à –≥–æ—Ä–æ–¥:
üí∞ –í –∫–∞–∑–Ω–µ: {formarter(CityCoffers)}$

üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {formarter(CityPopulation)} —á–µ–ª.
‚†ÄüòÄ –°—á–∞—Å—Ç—å–µ: {formarter(CityHappy)}%
‚†Äüí∏ –ü—Ä–∏–±—ã–ª—å: {formarter(CityTaxes)}$/–ß–∞—Å
‚†Äüí∏ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (–° —É—á—ë—Ç–æ–º –∑–∞—Ç—Ä–∞—Ç): {formarter(CityTaxesNonCosts)}$/–ß–∞—Å

üåá –ó–¥–∞–Ω–∏–π: {formarter(CityBuildings)}

üßæ –ó–∞—Ç—Ä–∞—Ç—ã:
‚†Äüíß –ù–∞ –¥–æ–±—ã—á—É –≤–æ–¥—ã: {formarter(CityWaterCosts)}$
‚†Ä‚ö° –ù–∞ –¥–æ–±—ã—á—É —ç–Ω–µ—Ä–≥–∏–∏: {formarter(CityEnergyCosts)}$
‚†Äüëî –ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: {formarter(CityServiceCosts)}$
{text}""", keyboard=city_keyboard)

			elif text in ["–≥–æ—Ä–æ–¥ –∫–∞–∑–Ω–∞", "–≥–æ—Ä–æ–¥ —Å–Ω—è—Ç—å", "üí∞ —Å–Ω—è—Ç—å —Å –∫–∞–∑–Ω—ã"]:
				balance = user.get(user_id, 'dollars')
				coffers = user.get(user_id, 'CityCoffers')
				if coffers >= 1:
					balance += coffers
					user.update(user_id, 'dollars', balance)
					user.update(user_id, 'CityCoffers', 0)
					await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ —Å –∫–∞–∑–Ω—ã –≥–æ—Ä–æ–¥–∞ {formarter(coffers)}$!")
				else:
					await message.answer("‚ùå –ö–∞–∑–Ω–∞ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø—É—Å—Ç–∞!")

			elif text in ["–≥–æ—Ä–æ–¥ —Å–æ–±—ã—Ç–∏—è", "–≥–æ—Ä–æ–¥ –∏–≤–µ–Ω—Ç—ã", "–≥–æ—Ä–æ–¥ –µ–≤–µ–Ω—Ç", "–≥–æ—Ä–æ–¥ —Å–æ–±", "ü•≥ –≥–æ—Ä–æ–¥ —Å–æ–±—ã—Ç–∏—è"]:
				await message.answer("""ü•≥ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:

üèõ 1 >> –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –∫–æ–Ω—Ü–µ—Ä—Ç - 100 000$
üèò 2 >> –Ø—Ä–º–∞—Ä–∫–∞ - 350 000$
üé° 3 >> –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç–¥—ã—Ö - 750 000$
üéñ 4 >> –ü–∞—Ä–∞–¥ –∫ 9 –º–∞—è - 1 000 000$
‚õ∞ 5 >> –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ö–æ–¥ - 1 350 000$
üõ† 6 >> –î–µ–Ω—å —ç–∫–æ–ª–æ–≥–∞ - 2 000 000$

üîç –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ, –≤–≤–µ–¥–∏—Ç–µ: –°–æ–±—ã—Ç–∏–µ (–ù–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è)""")

			elif text in ["–æ–±–º–µ–Ω–Ω–∏–∫", "–æ–±–º–µ–Ω"]:
				await message.answer("""üí± –û–±–º–µ–Ω–Ω–∏–∫ $ –Ω–∞ VKC
üìà –ö—É—Ä—Å: 1 VKC - 1 000 000$""")

			elif text in ["–≥–æ—Ä–æ–¥ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å", "–≥–æ—Ä–æ–¥ –∑–¥–∞–Ω–∏—è", "–≥–æ—Ä–æ–¥ —Å—Ç—Ä–æ–π–∫–∞", "–≥–æ—Ä–æ–¥ —Å—Ç—Ä–æ–∏—Ç—å", "üèô –≥–æ—Ä–æ–¥ –∑–¥–∞–Ω–∏—è"]:
				await message.answer(f"""üåá –°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π:

üèï –ñ–∏–ª—ã–µ:
‚†Äüè† 1 >> –î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–æ–º - 50 000$
‚†Äüè° 2 >> –•–∏–∂–∏–Ω–∞ - 100 000$
‚†Äüè¢ 3 >> –î–≤—É—Ö—ç—Ç–∞–∂–∫–∞ - 500 000$
‚†Äüè¢ 4 >> –¢—Ä—ë—Ö—ç—Ç–∞–∂–∫–∞ - 750 000$
‚†Äüèô 5 >> –ú–Ω–æ–≥–æ—ç—Ç–∞–∂–∫–∞ - 1 000 000$
‚†Äüóº 6 >> –ù–µ–±–æ—Å–∫—Ä—ë–± - 2 500 000$

üè≠ –ó–∞–≤–æ–¥—ã:
‚†Äüå≤ 7 >> –î–µ—Ä–µ–≤–æ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â—ã–π –∑–∞–≤–æ–¥ - 100 000$
‚†Ä‚õì 8 >> –ú–∞—Ç–∞–ª–ª–æ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–≤–æ–¥ - 150 000$
‚†Äüöó 9 >> –ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥ - 300 000$
‚†Äüèó 10 >> –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥ - 350 000$
‚†ÄüöÇ 11 >> –í–∞–≥–æ–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥ - 400 000$
‚†Äüå° 12 >> –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∑–∞–≤–æ–¥ - 420 000$
‚†Äüå´ 13 >> –ù–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–≤–æ–¥ - 800 000$
‚†Äüß™ 14 >> –•–∏–º–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥ - 1 200 000$

üß† –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:
‚†Äüë∂ 15 >> –î–µ—Ç—Å–∫–∏–π —Å–∞–¥ - 100 000$
‚†Äüòµ 16 >> –ú–ª–∞–¥—à–∞—è —à–∫–æ–ª–∞ - 150 000$
‚†Äüë®‚Äçüè´ 17 >> –°—Ä–µ–¥–Ω—è—è —à–∫–æ–ª–∞ - 250 000$
‚†Äü§ì 18 >> –ì–∏–º–Ω–∞–∑–∏—è - 300 000$
‚†Äüßê 19 >> –õ–∏—Ü–µ–π - 400 000$
‚†Äüè´ 20 >> –ö–æ–ª–ª–µ–¥–∂ - 500 000$
‚†Äüë®‚Äçüî¨ 21 >> –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç - 750 000$

üòÄ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ—Ç–¥—ã—Ö:
‚†Äüå≥ 22 >> –ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–∞—Ä–∫ - 200 000$
‚†Äüé≤ 23 >> –î–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞ - 350 000$
‚†Äüèñ 24 >> –ü–ª—è–∂ - 500 000$
‚†Äüåâ 25 >> –ù–∞–±–µ—Ä–µ–∂–Ω–∞—è - 800 000$
‚†Äüé° 26 >> –ü–∞—Ä–∫ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤ - 1 000 000$
‚†Äüè∞ 27 >> –ú—É–∑–µ–π - 2 000 000$
‚†Äüèõ 28 >> –¢–µ–∞—Ç—Ä - 2 200 000$
‚†Äüè© 29 >> –û—Ç–µ–ª—å - 2 500 000$

‚ö° –≠–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ:
‚†Äüí® 30 >> –í–µ—Ç—Ä—è–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è - 25 000$
‚†Äüî≥ 31 >> –ë–ª–æ—á–Ω–æ-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è - 100 000$
‚†Äüåä 32 >> –í–æ–ª–Ω–æ–≤–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è - 300 000$
‚†Äüí• 33 >> –î–∏–∑–µ–ª—å–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è - 650 000$
‚†Äüåâ 34 >> –ü—Ä–∏–ª–∏–≤–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è - 800 000$
‚†Ä‚òÄ 35 >> –°–æ–ª–Ω–µ—á–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è - 900 000$
‚†Äüî• 36 >> –¢–µ–ø–ª–æ–≤–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è - 1 300 000$
‚†Ä‚ò¢ 37 >> –ê—Ç–æ–º–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è - 1 600 000$

üíß –í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ:
‚†Äüóº 38 >> –í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω–∞—è –±–∞—à–Ω—è - 25 000$
‚†Ä‚õ≤ 39 >> –í–æ–¥–æ–Ω–∞—Å–æ—Å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è - 120 000$
‚†Äüè≠ 40 >> –í–æ–¥–æ–æ—á–∏—Å—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è - 400 000$
‚†Äüåé 41 >> –≠–∫–æ–ª–æ–≥–∏—á–Ω–∞—è –≤–æ–¥–æ–æ—á–∏—Å—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è - 800 000$

‚ôª –û—Ç—Ö–æ–¥—ã:
‚†Äüóë 42 >> –£—Ä–Ω–∞ - 10 000$
‚†Äüì¶ 43 >> –ú—É—Å–æ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - 50 000$
‚†Äüèö 44 >> –ú–∞–ª–∞—è —Å—Ç–∞–Ω—Ü–∏—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ - 100 000$
‚†Äüè≠ 45 >> –û–±—ã—á–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ - 250 000$
‚†ÄüöØ 46 >> –ë–æ–ª—å—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ - 550 000$

üõí –ß—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–∞–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ: –ì–æ—Ä (–ù–æ–º–µ—Ä –ø–æ—Å—Ç—Ä–æ–π–∫–∏) (–ö–æ–ª-–≤–æ)""")

		else:
			tag = await bot.api.users.get(user_id)
			name = tag[0].first_name
			try:
				name = name.split("'")[:1][0]
			except:
				pass
			tag = f"[id{user_id}|{name}]"
			user.insert(user_id, tag)
			try:
				ref = message.ref
			except:
				ref = False
			try:
				if ref:
					ref_bonus = globals.get("ref_bonus")
					bonus = floor(ref_bonus/2)
					user.update(user_id, 'invest_balance', bonus)
					user.update(ref, 'invest_balance', user.get(ref, 'invest_balance') + ref_bonus)
					await message.answer(f"""‚úÖ {tag}, –≤—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –°–æ–≥–ª–∞—à–µ–Ω–∏–µ–º: https://vk.com/@investorvkc-terms-of-use
üë• –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ {user.get(ref, 'tag')} –∏ –ø–æ–ª—É—á–∏–ª–∏ {formarter(bonus)} Coin!""", keyboard=menu_keyboard)
					await bot.api.messages.send(peer_id=ref, message=f"üë• {tag} –ø–µ—Ä–µ—à—ë–ª –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {formarter(ref_bonus)} VK Coin!", random_id=randint(-1000000000,1000000000))
				else:
					await message.answer(f"""‚úÖ  {tag}, –≤—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –°–æ–≥–ª–∞—à–µ–Ω–∏–µ–º: https://vk.com/@investorvkc-terms-of-use""", keyboard=menu_keyboard)
			except:
				await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â—ë —Ä–∞–∑!")

except Exception as error:
	print(error)
	pass

bot.loop_wrapper = lw
bot.run_forever()
